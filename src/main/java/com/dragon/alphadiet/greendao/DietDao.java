package com.dragon.alphadiet.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dragon.alphadiet.entity.Diet;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIET".
*/
public class DietDao extends AbstractDao<Diet, String> {

    public static final String TABLENAME = "DIET";

    /**
     * Properties of entity Diet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DietId = new Property(0, String.class, "dietId", true, "DIET_ID");
        public final static Property DietName = new Property(1, String.class, "dietName", false, "DIET_NAME");
        public final static Property DietWeight = new Property(2, int.class, "dietWeight", false, "DIET_WEIGHT");
        public final static Property DietType = new Property(3, String.class, "dietType", false, "DIET_TYPE");
        public final static Property DietDate = new Property(4, String.class, "dietDate", false, "DIET_DATE");
    }


    public DietDao(DaoConfig config) {
        super(config);
    }
    
    public DietDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIET\" (" + //
                "\"DIET_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: dietId
                "\"DIET_NAME\" TEXT," + // 1: dietName
                "\"DIET_WEIGHT\" INTEGER NOT NULL ," + // 2: dietWeight
                "\"DIET_TYPE\" TEXT," + // 3: dietType
                "\"DIET_DATE\" TEXT);"); // 4: dietDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIET\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Diet entity) {
        stmt.clearBindings();
 
        String dietId = entity.getDietId();
        if (dietId != null) {
            stmt.bindString(1, dietId);
        }
 
        String dietName = entity.getDietName();
        if (dietName != null) {
            stmt.bindString(2, dietName);
        }
        stmt.bindLong(3, entity.getDietWeight());
 
        String dietType = entity.getDietType();
        if (dietType != null) {
            stmt.bindString(4, dietType);
        }
 
        String dietDate = entity.getDietDate();
        if (dietDate != null) {
            stmt.bindString(5, dietDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Diet entity) {
        stmt.clearBindings();
 
        String dietId = entity.getDietId();
        if (dietId != null) {
            stmt.bindString(1, dietId);
        }
 
        String dietName = entity.getDietName();
        if (dietName != null) {
            stmt.bindString(2, dietName);
        }
        stmt.bindLong(3, entity.getDietWeight());
 
        String dietType = entity.getDietType();
        if (dietType != null) {
            stmt.bindString(4, dietType);
        }
 
        String dietDate = entity.getDietDate();
        if (dietDate != null) {
            stmt.bindString(5, dietDate);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Diet readEntity(Cursor cursor, int offset) {
        Diet entity = new Diet( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // dietId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dietName
            cursor.getInt(offset + 2), // dietWeight
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dietType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // dietDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Diet entity, int offset) {
        entity.setDietId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDietName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDietWeight(cursor.getInt(offset + 2));
        entity.setDietType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDietDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Diet entity, long rowId) {
        return entity.getDietId();
    }
    
    @Override
    public String getKey(Diet entity) {
        if(entity != null) {
            return entity.getDietId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Diet entity) {
        return entity.getDietId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
