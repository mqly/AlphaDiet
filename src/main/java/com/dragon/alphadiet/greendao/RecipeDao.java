package com.dragon.alphadiet.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dragon.alphadiet.entity.Recipe;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECIPE".
*/
public class RecipeDao extends AbstractDao<Recipe, String> {

    public static final String TABLENAME = "RECIPE";

    /**
     * Properties of entity Recipe.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RecipeId = new Property(0, String.class, "recipeId", true, "RECIPE_ID");
        public final static Property RecipeImage = new Property(1, String.class, "recipeImage", false, "RECIPE_IMAGE");
        public final static Property RecipeName = new Property(2, String.class, "recipeName", false, "RECIPE_NAME");
        public final static Property RecipeMaterial = new Property(3, String.class, "recipeMaterial", false, "RECIPE_MATERIAL");
        public final static Property RecipeStep = new Property(4, String.class, "recipeStep", false, "RECIPE_STEP");
        public final static Property RecipeType = new Property(5, String.class, "recipeType", false, "RECIPE_TYPE");
    }


    public RecipeDao(DaoConfig config) {
        super(config);
    }
    
    public RecipeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECIPE\" (" + //
                "\"RECIPE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: recipeId
                "\"RECIPE_IMAGE\" TEXT," + // 1: recipeImage
                "\"RECIPE_NAME\" TEXT," + // 2: recipeName
                "\"RECIPE_MATERIAL\" TEXT," + // 3: recipeMaterial
                "\"RECIPE_STEP\" TEXT," + // 4: recipeStep
                "\"RECIPE_TYPE\" TEXT);"); // 5: recipeType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECIPE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Recipe entity) {
        stmt.clearBindings();
 
        String recipeId = entity.getRecipeId();
        if (recipeId != null) {
            stmt.bindString(1, recipeId);
        }
 
        String recipeImage = entity.getRecipeImage();
        if (recipeImage != null) {
            stmt.bindString(2, recipeImage);
        }
 
        String recipeName = entity.getRecipeName();
        if (recipeName != null) {
            stmt.bindString(3, recipeName);
        }
 
        String recipeMaterial = entity.getRecipeMaterial();
        if (recipeMaterial != null) {
            stmt.bindString(4, recipeMaterial);
        }
 
        String recipeStep = entity.getRecipeStep();
        if (recipeStep != null) {
            stmt.bindString(5, recipeStep);
        }
 
        String recipeType = entity.getRecipeType();
        if (recipeType != null) {
            stmt.bindString(6, recipeType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Recipe entity) {
        stmt.clearBindings();
 
        String recipeId = entity.getRecipeId();
        if (recipeId != null) {
            stmt.bindString(1, recipeId);
        }
 
        String recipeImage = entity.getRecipeImage();
        if (recipeImage != null) {
            stmt.bindString(2, recipeImage);
        }
 
        String recipeName = entity.getRecipeName();
        if (recipeName != null) {
            stmt.bindString(3, recipeName);
        }
 
        String recipeMaterial = entity.getRecipeMaterial();
        if (recipeMaterial != null) {
            stmt.bindString(4, recipeMaterial);
        }
 
        String recipeStep = entity.getRecipeStep();
        if (recipeStep != null) {
            stmt.bindString(5, recipeStep);
        }
 
        String recipeType = entity.getRecipeType();
        if (recipeType != null) {
            stmt.bindString(6, recipeType);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Recipe readEntity(Cursor cursor, int offset) {
        Recipe entity = new Recipe( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // recipeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // recipeImage
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // recipeName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // recipeMaterial
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // recipeStep
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // recipeType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Recipe entity, int offset) {
        entity.setRecipeId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRecipeImage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRecipeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecipeMaterial(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRecipeStep(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRecipeType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Recipe entity, long rowId) {
        return entity.getRecipeId();
    }
    
    @Override
    public String getKey(Recipe entity) {
        if(entity != null) {
            return entity.getRecipeId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Recipe entity) {
        return entity.getRecipeId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
